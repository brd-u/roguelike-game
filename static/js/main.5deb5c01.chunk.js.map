{"version":3,"sources":["InputManager.js","Entity.js","Player.js","Loot.js","Monster.js","Spawner.js","World.js","Rogue.js","App.js","index.js"],"names":["InputManager","observers","handleKeys","e","preventDefault","keyCode","broadcast","x","y","fn","this","push","filter","subscriber","subscribe","action","data","forEach","document","addEventListener","removeEventListener","Entity","size","attributes","verb","world","console","log","context","fillStyle","color","textBaseline","font","fillText","ascii","offset","Player","inventory","name","health","dx","dy","item","newPlayer","Object","assign","Loot","player","add","remove","Moster","addToHistory","lootTable","monsterTable","getRandomInt","max","Math","floor","random","Spawner","spawnCount","createEntity","count","entity","moveToSpace","spawn","width","height","tilesize","length","Monster","World","entities","history","worldmap","Array","getEntityAtLocation","undefined","find","tempPlayer","copyPlayer","move","isWall","map","Map","Cellular","connected","randomize","userCallback","value","create","connect","drawWall","draw","fillRect","shift","Rogue","canvasRef","React","useRef","useState","setWorld","inputManager","handleInput","JSON","stringify","newWorld","movePlayer","useEffect","createCellularMap","spawner","spawnLoot","spawnMonsters","bindKeys","unbindKeys","unsubscribe","ctx","current","getContext","clearRect","ref","style","border","background","index","App","className","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5deb5c01.chunk.js","sourcesContent":["class InputManager {\r\n\r\n    observers = []\r\n\r\n    subscribe(fn) {\r\n\r\n        this.observers.push(fn)\r\n    }\r\n\r\n    unsubscribe(fn) {\r\n        this.observers = this.observers.filter(subscriber => this.subscribe !== fn)\r\n    }\r\n\r\n    broadcast(action, data) {\r\n        this.observers.forEach(subscriber => {\r\n            subscriber(action, data)\r\n        });\r\n    }\r\n\r\n    handleKeys = e => {\r\n        e.preventDefault()\r\n        switch (e.keyCode) {\r\n            case 37:\r\n                this.broadcast('move', { x: -1, y: 0 })\r\n                break\r\n            case 38:\r\n                this.broadcast('move', { x: 0, y: -1 })\r\n                break\r\n            case 39:\r\n                this.broadcast('move', { x: 1, y: 0 })\r\n                break\r\n            case 40:\r\n                this.broadcast('move', { x: 0, y: 1 })\r\n                break\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n\r\n    bindKeys() {\r\n        document.addEventListener('keydown', this.handleKeys)\r\n    }\r\n\r\n    unbindKeys() {\r\n        document.removeEventListener('keydown', this.handleKeys)\r\n    }\r\n\r\n\r\n}\r\nexport default InputManager","class Entity {\r\n\r\n    constructor(x, y, size, attributes) {\r\n        this.x = x\r\n        this.y = y\r\n        this.size = size\r\n        this.attributes = { ...attributes }\r\n    }\r\n\r\n\r\n    action(verb, world) {\r\n\r\n        console.log(`Verb: ${verb}`)\r\n    }\r\n\r\n    draw(context) {\r\n        context.fillStyle = this.attributes.color || 'white'\r\n        context.textBaseline = 'hanging'\r\n        context.font = '16px Halvetica'\r\n        context.fillText(this.attributes.ascii,\r\n            this.x * this.size + (this.attributes.offset ? this.attributes.offset.x : 0),\r\n            this.y * this.size + (this.attributes.offset ? this.attributes.offset.y : 0)\r\n        )\r\n    }\r\n\r\n}\r\nexport default Entity","import Entity from './Entity.js'\r\n\r\nclass Player extends Entity {\r\n\r\n    inventory = []\r\n\r\n    attributes = {\r\n        name: 'Player',\r\n        ascii: '@',\r\n        health: 10\r\n    }\r\n\r\n    move(dx, dy) {\r\n        if (this.attributes.health <= 0) return\r\n        this.x += dx\r\n        this.y += dy\r\n    }\r\n\r\n    add(item) {\r\n        this.inventory.push(item)\r\n    }\r\n\r\n    copyPlayer() {\r\n        let newPlayer = new Player()\r\n        Object.assign(newPlayer, this)\r\n        return newPlayer\r\n    }\r\n}\r\nexport default Player","import Entity from './Entity.js'\r\n\r\nclass Loot extends Entity {\r\n\r\n    action(verb, world) {\r\n\r\n        if (verb === 'bump') {\r\n            world.player.add(this)\r\n            world.remove(this)\r\n        }\r\n        if (verb === 'drop') {\r\n            console.log('drop', this)\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Loot","import Entity from './Entity.js'\r\n\r\nclass Moster extends Entity {\r\n\r\n    action(verb, world) {\r\n        if (verb === 'bump') {\r\n            //attack\r\n            world.addToHistory(`Player attacks${this.attributes.name}!`)\r\n            this.attributes.health = this.attributes.health - 1\r\n            if (this.attributes.health <= 0) {\r\n                world.addToHistory(`${this.attributes.name} dies!`)\r\n                world.remove(this)\r\n            } else {\r\n                world.addToHistory(`${this.attributes.name}'s health = ${this.attributes.health}`)\r\n                world.player.attributes.health = world.player.attributes.health - 1\r\n                if (world.player.attributes.health <= 0) {\r\n                    world.addToHistory('You have died!')\r\n                } else {\r\n                    world.addToHistory(`You have ${world.player.attributes.health} health`)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Moster\r\n","import Loot from './Loot.js'\r\nimport Monster from './Monster.js'\r\n\r\n\r\n\r\n\r\nconst lootTable = [\r\n    { name: 'Long Sword', color: 'darkgrey', ascii: '/', offset: { x: 6, y: 3 } },\r\n    { name: 'Health Potion', color: 'red', ascii: '!', offset: { x: 6, y: 3 } },\r\n    { name: 'Gold coin', color: 'yellow', ascii: '$', offset: { x: 3, y: 3 } },\r\n    { name: 'Light Armor', color: 'lightgrey', ascii: '#', offset: { x: 4, y: 3 } }\r\n]\r\n\r\nconst monsterTable = [\r\n    { name: 'Kobold', color: 'green', ascii: 'K', offset: { x: 4, y: 3 } , health: 3},\r\n    { name: 'Dragon', color: 'darkred', ascii: 'D', offset: { x: 6, y: 3 } , health: 5},\r\n    { name: 'Slime', color: 'darkGreen', ascii: 'S', offset: { x: 3, y: 2 }, health: 2 },\r\n    // { name: 'Slime', color: 'darkGreen', ascii: 'S', offset: { x: 3, y: 2 }, health: 2 }\r\n]\r\n\r\nclass Spawner {\r\n\r\n    constructor(world) {\r\n        this.world = world\r\n    }\r\n\r\n    spawn(spawnCount, createEntity) {\r\n        for (let count = 0; count < spawnCount; count++) {\r\n            let entity = createEntity()\r\n            this.world.add(entity)\r\n            this.world.moveToSpace(entity)\r\n        }\r\n    }\r\n\r\n    spawnLoot(spawnCount) {\r\n        this.spawn(spawnCount, () => {\r\n            return new Loot(\r\n                getRandomInt(this.world.width-1),\r\n                getRandomInt(this.world.height-1),\r\n                this.world.tilesize,\r\n                lootTable[getRandomInt(lootTable.length)])\r\n        })\r\n    }\r\n\r\n\r\n    spawnMonsters(spawnCount) {\r\n        this.spawn(spawnCount, () => {\r\n            return new Monster(\r\n                getRandomInt(this.world.width-1),\r\n                getRandomInt(this.world.height-1),\r\n                this.world.tilesize,\r\n                monsterTable[getRandomInt(lootTable.length)])\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max))\r\n}\r\n\r\nexport default Spawner","import { Map } from 'rot-js'\r\nimport Player from './Player.js'\r\n\r\n\r\nclass World {\r\n    constructor(width, height, tilesize) {\r\n        this.width = width\r\n        this.height = height\r\n        this.tilesize = tilesize\r\n\r\n        this.entities = [new Player(0, 0, 16)]\r\n        this.history = ['You enter the dengeon', '---']\r\n\r\n        this.worldmap = new Array(this.width)\r\n        for (let x = 0; x < this.width; x++) {\r\n            this.worldmap[x] = new Array(this.height)\r\n        }\r\n    }\r\n    get player() {\r\n        return this.entities[0]\r\n    }\r\n\r\n    add(entity) {\r\n        this.entities.push(entity)\r\n    }\r\n\r\n    remove(entity) {\r\n        this.entities = this.entities.filter(e => e !== entity)\r\n    }\r\n\r\n    moveToSpace(entity) {\r\n        for (let x = entity.x; x < this.width; x++) {\r\n            for (let y = entity.y; y < this.height; y++) {\r\n                if (this.worldmap[x][y] === 0 && !this.getEntityAtLocation(x, y)) {\r\n                    entity.x = x\r\n                    entity.y = y\r\n                    return\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    isWall(x, y) {\r\n        return (\r\n            this.worldmap[x] === undefined ||\r\n            this.worldmap[y] === undefined ||\r\n            this.worldmap[x][y] === 1\r\n        )\r\n    }\r\n\r\n    getEntityAtLocation(x, y) {\r\n        return this.entities.find(entity => entity.x === x && entity.y === y)\r\n    }\r\n\r\n    movePlayer(dx, dy) {\r\n        let tempPlayer = this.player.copyPlayer()\r\n        tempPlayer.move(dx, dy)\r\n\r\n        let entity = this.getEntityAtLocation(tempPlayer.x, tempPlayer.y)\r\n        if (entity) {\r\n            console.log(entity)\r\n            entity.action('bump', this)\r\n            return\r\n        }\r\n        if (this.isWall(tempPlayer.x, tempPlayer.y)) {\r\n            console.log(`Way blocked at ${tempPlayer.x}:${tempPlayer.y}!`)\r\n        } else {\r\n            this.player.move(dx, dy)\r\n        }\r\n    }\r\n\r\n    createCellularMap() {\r\n\r\n        var map = new Map.Cellular(this.width, this.height, { connected: true })\r\n        map.randomize(0.5)\r\n        var userCallback = (x, y, value) => {\r\n\r\n            if (x === 0 || y === 0 || x === this.width - 1 || y === this.height - 1) {\r\n                this.worldmap[x][y] = 1\r\n                return\r\n            }\r\n            this.worldmap[x][y] = (value === 0) ? 1 : 0\r\n        }\r\n        map.create(userCallback)\r\n        map.connect(userCallback, 1)\r\n    }\r\n\r\n    draw(context) {\r\n        for (let x = 0; x < this.width; x++) {\r\n            for (let y = 0; y < this.height; y++) {\r\n                if (this.worldmap[x][y] === 1) this.drawWall(context, x, y)\r\n            }\r\n        }\r\n        this.entities.forEach(entity => {\r\n            entity.draw(context)\r\n        })\r\n    }\r\n\r\n    drawWall(context, x, y) {\r\n        context.fillStyle = '#000'\r\n        context.fillRect(\r\n            x * this.tilesize,\r\n            y * this.tilesize,\r\n            this.tilesize,\r\n            this.tilesize\r\n        )\r\n    }\r\n\r\n    addToHistory(history) {\r\n        this.history.push(history)\r\n        if (this.history.length > 6) this.history.shift()\r\n    }\r\n\r\n}\r\nexport default World","import React, { useRef, useEffect, useState } from 'react'\r\nimport InputManager from './InputManager.js'\r\nimport Player from './Player.js'\r\nimport Spawner from './Spawner.js'\r\nimport World from './World.js'\r\n\r\nconst Rogue = ({ width, height, tilesize }) => {\r\n\r\n    const canvasRef = React.useRef()\r\n    // const [player, setPlayer] = useState(new Player(1, 2, tilesize))\r\n    const [world, setWorld] = useState(new World(width, height, tilesize))\r\n\r\n    let inputManager = new InputManager()\r\n\r\n    const handleInput = (action, data) => {\r\n        console.log(`handle input:${action}:${JSON.stringify(data)}`)\r\n        let newWorld = new World()\r\n        Object.assign(newWorld, world)\r\n        newWorld.movePlayer(data.x, data.y)\r\n        setWorld(newWorld)\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(\"Create Map!\")\r\n        let newWorld = new World()\r\n        Object.assign(newWorld, world)\r\n        newWorld.createCellularMap()\r\n        newWorld.moveToSpace(world.player)\r\n        let spawner = new Spawner(newWorld)\r\n        spawner.spawnLoot(10)\r\n        setWorld(newWorld)\r\n        spawner.spawnMonsters(6)\r\n\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        console.log('Bind input')\r\n        inputManager.bindKeys()\r\n        inputManager.subscribe(handleInput)\r\n        return () => {\r\n            inputManager.unbindKeys()\r\n            inputManager.unsubscribe(handleInput)\r\n        }\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        console.log('Draw to canvas')\r\n        const ctx = canvasRef.current.getContext('2d')\r\n        ctx.clearRect(0, 0, width * tilesize, height * tilesize)\r\n        world.draw(ctx)\r\n        world.draw(ctx)\r\n    })\r\n\r\n\r\n    return (\r\n        <>\r\n            <canvas\r\n                ref={canvasRef}\r\n                width={width * tilesize}\r\n                height={height * tilesize}\r\n                style={{ border: '1px solid black', background: 'DimGray' }}>\r\n            </canvas>\r\n            <ul>\r\n                {world.player.inventory.map((item, index) => (<li key={index}>{item.attributes.name}</li>))}\r\n            </ul>\r\n\r\n            <ul>\r\n                {world.history.map((item, index) => (<li key={index}>{item}</li>))}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Rogue","import React from 'react'\nimport Rogue from './Rogue.js'\n\n\nconst App = () => (\n\n  <div className=\"App\">\n    <Rogue width={40} height={40} tilesize={16} />\n  </div>\n)\n\n\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}